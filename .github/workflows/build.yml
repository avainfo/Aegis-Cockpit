name: CI

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      # Rendu headless Qt
      QT_QPA_PLATFORM: offscreen
      # UTF-8 pour éviter les warnings Qt
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      # ccache
      CCACHE_DIR: ~/.cache/ccache
      CMAKE_BUILD_PARALLEL_LEVEL: 4

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Outils de compilation & rendu software (GL/Vulkan) pour Qt Quick/3D
      - name: Install build tools & GPU software backend
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build ccache \
            libgtest-dev clang cppcheck \
            mesa-utils libgl1-mesa-dri libopengl0 mesa-vulkan-drivers

      # Installe Qt 6.9.1 via jurplel/install-qt-action (aqt)
      - name: Install Qt (6.9.1)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.9.1'
          target: 'desktop'
          modules: 'qtquickcontrols2 qtquick3d'
          cache: true
          install-deps: true  # installe les deps Qt manquantes côté apt si nécessaire

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ github.ref }}
            ccache-${{ runner.os }}

      # Vérif Qt installée (via jurplel) plutôt que dpkg
      - name: Verify Qt toolchain
        shell: bash
        run: |
          set -euo pipefail
          echo "QT_ROOT_DIR=${QT_ROOT_DIR}"
          test -d "${QT_ROOT_DIR}" || (echo "QT_ROOT_DIR missing" && exit 1)
          "${QT_ROOT_DIR}/bin/qmake6" -v || "${QT_ROOT_DIR}/bin/qmake" -v || true
          "${QT_ROOT_DIR}/bin/qmlimportscanner" -h >/dev/null
          test -d "${QT_ROOT_DIR}/qml/QtQuick" || (echo "QtQuick missing" && exit 1)
          test -d "${QT_ROOT_DIR}/qml/QtQuick/Controls" || (echo "QtQuick Controls2 missing" && exit 1)
          test -d "${QT_ROOT_DIR}/qml/QtQuick3D" || (echo "QtQuick3D missing" && exit 1)
          echo "Qt components OK"

      # (Optionnel) Build GoogleTest si tu l'utilises en statique
      - name: Build GoogleTest (system source)
        run: |
          cd /usr/src/gtest
          sudo cmake -B build .
          sudo cmake --build build -j$(nproc)
          sudo cp build/lib/*.a /usr/lib

      - name: Configure CMake (Release + ccache + Ninja)
        run: |
          ccache --zero-stats || true
          ccache --max-size=2G || true
          cmake -B build -S . -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        run: cmake --build build --config Release

      - name: Run tests
        run: ctest --test-dir build --output-on-failure --build-config Release

      - name: Static analysis (cppcheck)
        run: |
          cppcheck --std=c++23 --enable=warning,style,performance,portability \
                   --inline-suppr --suppress=missingIncludeSystem \
                   -i build . || true

      - name: Show ccache stats
        if: always()
        run: ccache --show-stats || true

      - name: Collect logs on failure
        if: failure()
        run: |
          mkdir -p ci-logs
          if [ -d build/Testing/Temporary ]; then
            cp -r build/Testing/Temporary ci-logs/ctest-temp || true
          fi
          find build -maxdepth 2 -name "*.log" -exec cp {} ci-logs/ \; || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build
          path: |
            build/**
            ci-logs/**
          retention-days: 7
